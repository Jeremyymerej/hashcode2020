/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package hashcode2020

import hashcode2020.Algo.pizza.Dumb
import hashcode2020.Algo.pizza.HeloAlgo
import hashcode2020.Algo.pizza.PIZZAS
import hashcode2020.Algo.pizza.RandomPizza
import hashcode2020.Algo.pizza.ScoringPizza
import hashcode2020.Parser.FileContent
import hashcode2020.Parser.FileWriter


class App {

    final static List<String> pizzaFiles = [PIZZAS.FILE_A, PIZZAS.FILE_B, PIZZAS.FILE_C, PIZZAS.FILE_D, PIZZAS.FILE_E]

    static void main(String[] args) {
        //hashCodeFlow()
        randomHashCodeFlow()
        //println pizzaScoreFromFile(PIZZAS.FILE_E, FileWriter.outputPathOf(PIZZAS.FILE_E))
    }

    static void hashCodeFlow(){
        List<String> hashCodeFiles = pizzaFiles
        List<String> testedFile = [PIZZAS.FILE_E]
        List<String> answers
        boolean answersIsReadyToOutput = true
        hashCodeFiles.each {
            FileContent inputFileContent = FileContent.extractContentFromFile(it)
            answers = compute(inputFileContent)
            if(answersIsReadyToOutput){
                FileWriter.writeOutputFile(FileWriter.formatPizzaAnswer(answers), FileWriter.outputPathOf(it))
            }
        }
    }

    static void randomHashCodeFlow(){
        String testedFile = PIZZAS.FILE_E
        List<String> answers
        List <Integer> allScores = []
        int nbExperiences = 1000
        int previousScore = -1
        FileContent inputFileContent = FileContent.extractContentFromFile(testedFile)
        for(int i = 0; i < nbExperiences; i++) {
            answers = randomCompute(inputFileContent)
            int currentScore = pizzaScore(inputFileContent, answers)
            allScores.add(currentScore)
            if(currentScore > previousScore ){
                FileWriter.writeOutputFile(FileWriter.formatPizzaAnswer(answers), FileWriter.outputPathOf(testedFile))
                previousScore = currentScore
            }
            if (i % 100 == 0) {
                println("Current Experience number # ${i}")
            }
        }
        FileWriter.writeOutputFile(allScores.sort().join('\n'), 'practice/randomScore.txt')
    }

    static List<String> compute(FileContent fileContent) {
        List<String> EMPTY = []
        // Perform Algo on it
        List<String> answer = Dumb.apply(fileContent)
        List<String> answerHelo = HeloAlgo.apply(fileContent)

        // Scoring function
        println "Dumb => " + pizzaScore(fileContent, answer)
        println "HELO => " + pizzaScore(fileContent, answerHelo)

        // Return Wanted Answers
        return EMPTY
    }

    static List<String> randomCompute(FileContent fileContent) {
        List<String> answer = RandomPizza.apply(fileContent)
        //println "Random => " + pizzaScore(fileContent, answer)
        return answer
    }

    private static pizzaScoreFromFile(String inputPath, String outputPath) {
        return ScoringPizza.computeScore(FileContent.extractContentFromFile(inputPath), FileContent.extractContentFromFile(outputPath).second())
    }

    private static int pizzaScore(FileContent inputFileContent, List<String> slices){
        return ScoringPizza.computeScore(inputFileContent, slices)
    }

    String greeting(){
        "Hello world"
    }

}
